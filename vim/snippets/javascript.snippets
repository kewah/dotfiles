# --------------------------------------------------------------
# LOOP
# --------------------------------------------------------------
# for increment
snippet fori
	var ${2:len} = ${3:array}.length;
	var ${1:i}, ${4:item};

	for ($1 = 0; $1 < $2; $1++) {
		$4 = $3[$1];
		${5}
	}
# for decrement
snippet ford
	var ${1:i}, ${3:item};

	for ($1 = ${2:array}.length - 1; $1 >= 0; $1--) {
		$3 = $2[$1];
		${4}
	}
# while decrement
snippet whiled
	var ${1:i} = ${2:array}.length;
	var ${3:item};

	while (${1:i}--) {
		$3 = $2[$1];
		${4}
	}
# -------------------------------------------------------------
# COMMENTS
# --------------------------------------------------------------
snippet bigcom
	// --------------------------------------------------------------------------
	// ${1}
	// --------------------------------------------------------------------------
# -------------------------------------------------------------
# CONDITIONS
# --------------------------------------------------------------
snippet ift
	${1:condition}
		? ${2:true}
		: ${3:false}
# --------------------------------------------------------------
# UTILS
# --------------------------------------------------------------
snippet cons
	console.log(${1});
snippet self
	var self = this;
# --------------------------------------------------------------
# LISTENER
# --------------------------------------------------------------
# addEventListener
snippet ael
	addEventListener('${1:type}', ${3}${2:, false});
snippet rel
	removeEventListener('${1:type}', ${2}${3:, false});
snippet query
	querySelector${1:All}('${2:sel}');
snippet prevent
	${1:e.preventDefault();}
	${2:e.stopPropagation();}
# --------------------------------------------------------------
# FUNCTIONS
# --------------------------------------------------------------
# Function
snippet fn
	function ${1:function_name}(${2:argument}) {
		${0}
	}
# Anonymous Function
snippet af
	function (${1}) {
		${0}
	}${2:;}
# Immediate function
snippet (f
	(function (${1}) {
		${0}
	}(${2}));
# Object Method
snippet :f
	${1:function_name}: function (${2:argument}) {
		${0}
	}${3:,}
snippet prot
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${4:// body...}
	};
snippet bind
	this.${1:handler} = this.$1.bind(this);${2}
snippet autonew
	if (!(this instanceof ${1:ClassName})) {
		return new $1(${2:params});
	}
# setTimeout function
snippet sett
	setTimeout(function () {${0}}${2}, ${1:10});
# docstring
snippet /**
	/**
	 * ${0:description}
	 *
	 */
snippet @par
	@param {${1:type}} ${2:name} ${0:description}
snippet @ret
	@return {${1:type}} ${0:description}
# --------------------------------------------------------------
# OBJECT
# --------------------------------------------------------------
snippet _slice
	var _slice = Array.prototype.slice;
snippet _has
	var _has = Object.prototype.hasOwnProperty;
snippet typeb
	typeof ${0:var} === 'boolean'
snippet typen
	typeof ${0:var} === 'number'
snippet typef
	typeof ${0:var} === 'function'
snippet typeo
	typeof ${0:var} === 'object'
snippet types
	typeof ${0:var} === 'string'
snippet typeu
	typeof ${0:var} === 'undefined'
# --------------------------------------------------------------
# COMMONJS
# --------------------------------------------------------------
snippet mod
	module.exports = ${1}
snippet exp
	exports = module.exports = ${1}
snippet req
	var ${1:name} = require('${2:path}');${3}
# --------------------------------------------------------------
# TEMPLATES
# --------------------------------------------------------------
snippet tpl
	'use strict';

	${1}
snippet env
	#!/usr/bin/env node
	${1}
